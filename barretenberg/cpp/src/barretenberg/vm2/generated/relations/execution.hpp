// AUTOGENERATED FILE
#pragma once

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"

namespace bb::avm2 {

template <typename FF_> class executionImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 1> SUBRELATION_PARTIAL_LENGTHS = { 3 };

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& new_term,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp =
                ((FF(1) - new_term.execution_last) * ((new_term.execution_pc_shift - new_term.execution_pc) - FF(1)));
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class execution : public Relation<executionImpl<FF>> {
  public:
    static constexpr const char* NAME = "execution";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {
        case 0:
            return "PC_INCREMENT";
        }
        return std::to_string(index);
    }

    static constexpr size_t SR_PC_INCREMENT = 0;
};

} // namespace bb::avm2